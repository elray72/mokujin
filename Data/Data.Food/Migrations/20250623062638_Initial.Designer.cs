// <auto-generated />
using System;
using Data.Food.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Food.Migrations
{
    [DbContext(typeof(FoodDbContext))]
    [Migration("20250623062638_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Food.Models.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<decimal?>("Calories")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Carbohydrates")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("Fat")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Fibre")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Protein")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SaturatedFat")
                        .HasColumnType("numeric");

                    b.Property<string>("ServingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ServingSize")
                        .HasColumnType("numeric");

                    b.Property<int>("ServingUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("ServingWeight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Sodium")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Sugars")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ServingUnitId");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("Data.Food.Models.FoodUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodUnits");
                });

            modelBuilder.Entity("Data.Food.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("QuantityUnitId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("QuantityUnitId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Data.Food.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("CookingTime")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("PreparationTime")
                        .HasColumnType("interval");

                    b.Property<decimal?>("Serves")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Data.Food.Models.RecipeStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeSteps");
                });

            modelBuilder.Entity("RecipeRecipe", b =>
                {
                    b.Property<Guid>("ComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.HasKey("ComponentsId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeRecipe");
                });

            modelBuilder.Entity("Data.Food.Models.Food", b =>
                {
                    b.HasOne("Data.Food.Models.FoodUnit", "ServingUnit")
                        .WithMany("Food")
                        .HasForeignKey("ServingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServingUnit");
                });

            modelBuilder.Entity("Data.Food.Models.Ingredient", b =>
                {
                    b.HasOne("Data.Food.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Food.Models.FoodUnit", "QuantityUnit")
                        .WithMany()
                        .HasForeignKey("QuantityUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Food.Models.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Food");

                    b.Navigation("QuantityUnit");
                });

            modelBuilder.Entity("Data.Food.Models.RecipeStep", b =>
                {
                    b.HasOne("Data.Food.Models.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeRecipe", b =>
                {
                    b.HasOne("Data.Food.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("ComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Food.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Food.Models.FoodUnit", b =>
                {
                    b.Navigation("Food");
                });

            modelBuilder.Entity("Data.Food.Models.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
